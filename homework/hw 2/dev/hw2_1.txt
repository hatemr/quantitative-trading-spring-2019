# Homework: Simple Spread Trading
Robert Hatem 

## 2. Data
Obtain split- and dividend-adjusted closing prices1 for 2 Dec 2016 though 31
Dec 2018 of a pair of ETFs (which we will call X and Y ) as specied below.
Estimate daily dollar volume, compute the running 15-trading-day median
of it over our sample period for X, and call that running median (as of any
day t) $N_t$.

# upload libraries
library(MASS)
library(Quandl)
library(ggplot2)
library(stringr)
library(R.cache)
library(quantmod)
library(dplyr)
library(zoo)

# memoization
reload.data = TRUE
QLoad <- R.cache::addMemoization(Quandl::Quandl)

# clean col names more
clean.quandl.name <- function(x) {
    cleaned <- x
    if (x=='Date') {
        
    } else {
        tryCatch({
                    parts <- stringr::str_split(x, " - ",n=2)
                    first.parts <- stringr::str_split(parts[[1]][[1]], "\\.",n=2)
                    cleaned <- paste(first.parts[[1]][[2]], parts[[1]][[2]], sep=".")
                    cleaned <- str_replace_all(cleaned," ","")
                    },
                 error = function(e) {cat(paste0("Err on",x,"\n"))}
                 )
    }
    stringr::str_trim(cleaned)
}

Make one function to upload, clean, and prepare the data.  

Uses the _EOD_ database from Quandl.


# prepare data
UploadData = function(ticker1, ticker2) {
    # get data
    Quandl.api_key('wFcUAbwJv3FbxzDwExsY')  # my key
    cat("Data Reload/n")
    quandl.call.1 = paste('EOD/', ticker1, '.11', sep='')
    quandl.call.2 = paste('EOD/', ticker1, '.12', sep='')
    quandl.call.3 = paste('EOD/', ticker2, '.11', sep='')
    quandl.call.4 = paste('EOD/', ticker2, '.12', sep='')
    
    # call Quandl
    data.raw.1 <- QLoad(c(quandl.call.1, quandl.call.2), start_date="2016-12-02", end_date="2018-12-31")
    data.raw.2 <- QLoad(c(quandl.call.3, quandl.call.4), start_date="2016-12-02", end_date="2018-12-31")
    
    # daily dollar volume
    new_col_name_1 = paste(ticker1, '.Daily_Volume', sep='')
    new_col_name_2 = paste(ticker2, '.Daily_Volume', sep='')
    
    data.raw.1[new_col_name_1] = data.raw.1[,2] * data.raw.1[,3]
    data.raw.2[new_col_name_2] = data.raw.2[,2] * data.raw.2[,3]
    
    # running median
    new_col_name_1 = paste(ticker1, '.Running_Median', sep='')
    #new_col_name_2 = paste(ticker2, '.Running_Median', sep='')
    
    data.raw.1[new_col_name_1] = c(rep(NA,14), rollmedian(data.raw.1[,4], 15))
    #data.raw.2[new_col_name_2] = c(rep(NA,14), rollmedian(data.raw.2[,4], 15))
        
    # clean col names
    names(data.raw.1) <- paste(cat("EOD.", ticker1, " -", sep=""), names(data.raw.1))  # add prefix
    names(data.raw.2) <- paste(cat("EOD.", ticker2, " -", sep=""), names(data.raw.2))
    names(data.raw.1)[1] <-"Date"  # remove one prefix
    names(data.raw.2)[1] <-"Date"   # remove one prefix
    raw_data = merge(data.raw.1, data.raw.2)  # combine, one dataframe
    
    # clean col names again
    fixed.names <- lapply(names(raw_data), clean.quandl.name)
    cat(paste(fixed.names,sep="\n"))
    renamed_data <- raw_data
    names(renamed_data) <- fixed.names
    
    return(renamed_data)
}


# upload data
df = UploadData('FTSL', 'SMH')


SimpleSpread = function(df, g=0.2, j=0.1, s=1, M=1) {
    # Runs spread stragegy and calculates PnL.
    #
    # Args:
    #   df: dataframe with two ticker's data.
    #   g: upper bound for entering positions.
    #   j: lower bound for learving position
    #   s: stop loss parameter. Proportion s of the gross traded cast for which if present position value
    #      has lost more than, then force an exit at current prices, and assume no more new positions for
    #      the remainder of the month.
    #   M: the window for calculating returns. Gives M-day returns (from adj. closing price). 
    #
    # Returns:
    #   df.temp: the dataframe with orders, positions, and PnL.
    
    df.temp = df
    
    # M-period Returns
    adj.close.col.1 = 'FTSL.Adj_Close'
    adj.close.col.2 = 'SMH.Adj_Close'
    
    df.temp['FTSL.Returns'] = Delt( df.temp[, c(adj.close.col.1)], k=M )
    df.temp['SMH.Returns'] = Delt( df.temp[, c(adj.close.col.2)], k=M )
    
    
    # Spread
    returns.col.1 = 'FTSL.Returns'
    returns.col.2 = 'SMH.Returns'
    
    df.temp$Spread = df.temp[,c(returns.col.1)] - df.temp[,c(returns.col.2)]
    
    
    # current month
    current.month = format(df.temp$Date[1], format="%m")
    
    # position
    df.temp$Position.X = 0
    df.temp$Position.Y = 0
    
    # initialize new postion
    new.position.X = 0
    new.position.Y = 0
    
    # number of shares
    df.temp$Num.shares.X = 0
    df.temp$Num.shares.Y = 0
    
    # cashflows to enter positions
    df.temp$cashflow.X = 0
    df.temp$cashflow.Y = 0
    df.temp$cashflow.total = 0
    
    # stop loss
    stop.loss.counter = 0
    
    for (row in 2:nrow(df.temp)){
        
        # replace NAs for first 14 running medians
        if (is.na(df[row, c('FTSL.Running_Median')])){
            df.temp[row, c('FTSL.Running_Median')] = df.temp[row, c('FTSL.Daily_Volume')]
        }
        
        # replace NAs for first 14 running medians
        #if (is.na(df[row, c('SMH.Running_Median')])){
        #    df.temp[row, c('SMH.Running_Median')] = df.temp[row, c('SMH.Daily_Volume')]
        #}
        
        
        if (stop.loss.counter == 0) {
        
            if (abs(df.temp$Spread[row]) > s) {
                new.position.X = 0
                new.position.Y = 0    # close positions
                stop.loss.counter = 3
            
            } else if (df.temp$Spread[row] > g) {    # ends above g, so be short the spread (-1,1)
                new.position.X = -1
                new.position.Y = 1

            } else if (df.temp$Spread[row] < -g) {    # ends below -g, so be long the spread (1,-1)
                new.position.X = 1
                new.position.Y = -1

            } else if (abs(df.temp$Spread[row]) < j) {    # lands between [-j, j], so be neutral the spread
                new.position.X = 0
                new.position.Y = 0

            } else {} # keep positions from prior row

            #check if last day of dataset
            if (row == nrow(df.temp)){
                new.position.X = 0
                new.position.Y = 0    # close positions
            } else if (format(df.temp$Date[row+1], format="%m") != current.month){    # if last day of month
                new.position.X = 0
                new.position.Y = 0    # close positions
                current.month = format(df.temp$Date[row+1], format="%m")
            }
            
        } else if (stop.loss.counter > 0) {
            if (abs(df.temp$Spread[row]) < g) {    # back in normal range
                stop.loss.counter = stop.loss.counter - 1
            } else {
                stop.loss.counter = 3    # must be in normal range for 3 straight days
            }
        }
        
        # record positions
        df.temp$Position.X[row] = new.position.X
        df.temp$Position.Y[row] = new.position.Y
        
        
        if ((df.temp$Position.X[row] != df.temp$Position.X[row-1]) & (df.temp$Position.X[row] != df.temp$Position.X[row-1])) {    # need to change position
            # Number of shares needed to be in that position
            df.temp$Num.shares.X[row] =  df.temp$Position.X[row] * floor( df.temp$FTSL.Running_Median[row] / ( 100*df.temp$FTSL.Adj_Close[row]) )
            df.temp$Num.shares.Y[row] =  df.temp$Position.Y[row] * floor( df.temp$FTSL.Running_Median[row] / ( 100*df.temp$SMH.Adj_Close[row]) )
        } else {    # maintain current number of shares
            df.temp$Num.shares.X[row] = df.temp$Num.shares.X[row-1]
            df.temp$Num.shares.Y[row] = df.temp$Num.shares.Y[row-1]
        }
        
    
        # cashflow to enter that position
        df.temp$cashflow.X[row] = -1 * ( df.temp$Num.shares.X[row] - df.temp$Num.shares.X[row-1] ) * df.temp$FTSL.Adj_Close[row]
        df.temp$cashflow.Y[row] = -1 * ( df.temp$Num.shares.Y[row] - df.temp$Num.shares.Y[row-1] ) * df.temp$SMH.Adj_Close[row]
        
        df.temp$cashflow.total[row] = df.temp$cashflow.X[row] + df.temp$cashflow.Y[row]
        
    }
    # profit and loss
    df.temp$PnL = cumsum(df.temp$cashflow.total)
    
    return(df.temp)
}



# run strategy
g = 0.015
drop = 0.005
j = g - drop
s = 0.02

df1 = SimpleSpread(df, g=g, j=j, s=s)

start = 1
end = 50
# plot
gp <- ggplot(data=df1[start:end,], aes(x=Date, y=Spread)) +
    geom_line(color='red', size=0.3) +
    geom_point(shape=19, color='black', size=1) +
    geom_ribbon(aes(ymin=j, ymax=g, alpha=0.1), fill="purple", alpha = 0.2, show.legend = F) +
    geom_ribbon(aes(ymin=-g, ymax=-j, alpha=0.1), fill="purple", alpha = 0.2, show.legend = F) +
    geom_hline(yintercept=s, linetype="dashed", color = "black", size=0.3) +
    geom_hline(yintercept=-s, linetype="dashed", color = "black", size=0.3) +
    ggtitle("Spread over time") +
    theme(axis.text.x = element_text(angle = 45, vjust=0.5),  # rotate x axis text
        panel.grid.minor = element_blank())
    
print(gp)

cols = names(df1)[c(1,2,5,6,9,10,11,12,13,14,15,16,17,18,19)]
df1[start:end,cols]


